import random

        
    
class Cromossomo:
    def __init__(self, valor, estado_final):
        self.valor = valor
        self.estado_final = estado_final
        self.aptidao = self.calcular_Aptidao(estado_final)   

    def calcular_Aptidao(self, estado_final):
        nota = 0
        for i  in range(len(estado_final)):
            if (str(self.valor) in estado_final[i]):
                nota += 5
            
            if (str(self.valor[i]) == estado_final.charAt[i]):
                nota += 50
            
        
        return nota;    
    def __gt__ (self,other):
        if (self.aptidao > other.aptidao):
            return -1
        elif(self.aptidao == other.aptidao):
            return 0
        
        return 1
    def __eq__(self, other) :
        if isinstance(other , Cromossomo):
            
            return self.valor == other.valor
        
        return False
    

class Util:
    
        
    def gerador(n):
        letras = "abcdefghijklmnopqrstuvxwyz"
        palavra = ''
        for i in range(n):
            palavra += letras[random.randrange(len(letras))]
        return palavra




class AG:
    
    def gerarPopulacao(populacao, tamanhoPopulacao, estadoFinal):
        for  i in range(tamanhoPopulacao): 
            populacao.append(Cromossomo(Util.gerador(estadoFinal.length()), estadoFinal));
        
    

    
    def ordenar(populacao):
        
        houveTroca = False
        
        distancia = len(populacao)

        
            
        while (distancia > 1 or houveTroca):
            distancia = (int) (distancia / 1.3)
            if (distancia <= 0):
                distancia = 1
            
            houveTroca = False
            for  i in range(len(populacao) - distancia):
                if (populacao[i].aptidao < populacao[i + distancia].aptidao):
                    tmp = populacao[i]
                    populacao[i] = populacao[i + distancia]
                    populacao[i + distancia] =  tmp
                    houveTroca = True
                
            

    
    def exibir(populacao):
        for  i in range(len(populacao)):
            print("Cromossomo: ",populacao[i].valor + " - ", populacao[i].aptidao," - ", populacao[i].porcentagemAptidao)
        

    
    def selecionarPorTorneio(populacao,  novaPopulacao,  taxaSelecao):
        

        
        torneio = []
        

        
        qtdSelecionados = taxaSelecao * len(populacao) / 100

        novaPopulacao.append(populacao[0])
        
        
        
        i = 1
        
        while (i <= qtdSelecionados):
            c1 = populacao.get( random.randrange(populacao.size()) )
            while (c2.equals(c1)):
                c2 = populacao.get( random.randrange(populacao.size()) )
            while (c3.equals(c1) or c3.equals(c2)):
                c3 = populacao.get( random.randrange(populacao.size()))

            torneio.append(c1)
            torneio.append(c2)
            torneio.append(c3)
            torneio.sort()

            selecionado = torneio.get(0);

            if (!novaPopulacao.contains(selecionado)) { //controle de visitados
                novaPopulacao.add(selecionado);
                i++;
                //System.out.println("selecionado.......... " + selecionado.valor );
            }
            
            torneio.clear(); //FALTOU LIMPAR A LISTA torneio para a próxima rodada
    

    
    def selecionarPorRoleta(List<Cromossomo> populacao, List<Cromossomo> novaPopulacao, int taxaSelecao):
        
        int aptidaoTotal = 0;
        for (int i = 0; i < populacao.size(); i++) {
            aptidaoTotal += populacao.get(i).aptidao;
        }
        System.out.println("Aptidão total: " + aptidaoTotal);

        
        for (int i = 0; i < populacao.size(); i++) {
            populacao.get(i).porcentagemAptidao = populacao.get(i).aptidao * 100 / aptidaoTotal;
            if (populacao.get(i).porcentagemAptidao == 0) {
                populacao.get(i).porcentagemAptidao = 1;
            }
        }
        
        List<Cromossomo> sorteio = new ArrayList<>();
        for (int i = 0; i < populacao.size(); i++) {
            for (int j = 0; j < populacao.get(i).porcentagemAptidao; j++) {
                sorteio.add(populacao.get(i));
            }
        }

        System.out.println("Tamanho da lista sorteio: " + sorteio.size());

        Random gerador = new Random();
        int posicaoSorteio;
        
        
        int qtdSelecionados = taxaSelecao * populacao.size() / 100;
        
       
        novaPopulacao.add(populacao.get(0));
        Cromossomo selecionado;

        for (int i = 1; i <= qtdSelecionados; i++) {
            posicaoSorteio = gerador.nextInt(sorteio.size());
            
            try {
                selecionado = sorteio.get(posicaoSorteio);

                novaPopulacao.add(selecionado);

                while (sorteio.remove(selecionado)){} //controle dos visitados
            } catch (Exception e) {
                System.out.println("Tentou pegar uma posição inválida do sorteio");
            }
            
        }
    

    
    def reproduzir(List<Cromossomo> populacao, List<Cromossomo> novaPopulacao, int taxaReproducao, String estadoFinal):
        String sPai,sMae,sFilho1,sFilho2;
        Random gerador = new Random();
        Cromossomo pai, mae;
        
        
        int qtdReproduzidos = taxaReproducao * populacao.size() / 100;

        int i = 0;
        do {
            pai = populacao.get( gerador.nextInt(populacao.size()) ); //futuramente, o pai pode ser um indivíduo bom
            do {
                mae = populacao.get( gerador.nextInt(populacao.size()) );
            } while (mae.equals(pai));

            sPai = pai.valor.toString();
            sMae = mae.valor.toString();
            
            sFilho1 = sPai.substring(0, sPai.length() / 2) + sMae.substring(sMae.length() / 2, sMae.length());
            sFilho2 = sMae.substring(0, sMae.length() / 2) + sPai.substring(sPai.length() / 2, sPai.length());

            novaPopulacao.add(new Cromossomo(new StringBuffer(sFilho1), estadoFinal)); //estadoFinal é passado para calcular aptidao do filho
            novaPopulacao.add(new Cromossomo(new StringBuffer(sFilho2), estadoFinal)); //estadoFinal é passado para calcular aptidao do filho
            i = i + 2;

        } while (i < qtdReproduzidos);
        
       
        while(novaPopulacao.size() > populacao.size()) {
            novaPopulacao.remove(novaPopulacao.size() - 1);
        }
    

    
    def mutar(List<Cromossomo> populacao, String estadoFinal):
        Random gerador = new Random();
        int qtdMutantes = gerador.nextInt(populacao.size() / 5); //a qtd de mutantes será no máximo 20% da população
        Cromossomo mutante;
        int posicaoMutante;

        for (; qtdMutantes > 0; qtdMutantes--) 
            posicaoMutante = gerador.nextInt(populacao.size());
            mutante = populacao.get(posicaoMutante);
            System.out.println("vai mutar " + mutante.valor + "  " + mutante.aptidao);
            //mudando
            String valorMutado = mutante.valor.toString();
            char caracterMutante = mutante.valor.charAt(gerador.nextInt(mutante.valor.length()));
            char caracterSorteado = Util.letras.charAt(gerador.nextInt(Util.tamanho));
            valorMutado = valorMutado.replace(caracterMutante, caracterSorteado);          
            mutante = new Cromossomo(new StringBuffer(valorMutado), estadoFinal);
            //JOptionPane.showMessageDialog(null, "mudado " + mutante.valor + "  " + mutante.aptidao);
            //recalculando sua aptidao
            populacao.set(posicaoMutante, mutante);




def main():
    tamanhoPopulacao = int(input("Tamanho da população"))
    estadoFinal = int(input("Palavra desejada"))
    taxaSelecao = int(input("taxa desejada 20 a 40%"))
    taxaReproducao = 100 - taxaSelecao
    taxaMutacao = int(input("Taxa de mutação (entre 5 a 10%)"))
    qtdGeracoes = int(input("Quantidade de gerações"))

    populacao = []
    novaPopulacao = []

    
    gerarPopulacao(populacao, tamanhoPopulacao, estadoFinal)
    ordenar(populacao)
    print("Geracao 1")
    exibir(populacao)

    i = 1
    for i in range(qtdGeracoes):
        
        selecionarPorTorneio(populacao, novaPopulacao, taxaSelecao)
        
        
        reproduzir(populacao, novaPopulacao, taxaReproducao, estadoFinal)
        
        if (i % (populacao.size() / taxaMutacao) == 0):
            mutar(novaPopulacao, estadoFinal)
        
        
        populacao.clear()
        populacao.addAll(novaPopulacao)
        novaPopulacao.clear()
        ordenar(populacao)
        print("\n\nGeracao " + (i + 1))
        exibir(populacao)



