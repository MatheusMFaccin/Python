import random

        
    
class Cromossomo:
    def __init__(self, valor, estado_final):
        self.valor = valor
        self.estado_final = estado_final
        self.aptidao = self.calcular_Aptidao(estado_final)   

    def calcular_Aptidao(self, estado_final):
        nota = 0
        i = 0
        for i  in range(len(str(estado_final))-1):
            if str(self.valor) in estado_final[i]:
                nota += 5
            print("self.valor: ",self.valor, "i: ", i)
            if str(self.valor[i]) == estado_final[i]:
                nota += 50
            
        
        return nota;    
    def __gt__ (self,other):
        if (self.aptidao > other.aptidao):
            return -1
        elif(self.aptidao == other.aptidao):
            return 0
        
        return 1
    def __eq__(self, other) :
        if isinstance(other , Cromossomo):
            
            return self.valor == other.valor
        
        return False
    

class Util:
    letras = "abcdefghijklmnopqrstuvxwyz"
        
    def gerador(n):
        letras = "abcdefghijklmnopqrstuvxwyz"
        palavra = ''
        for i in range(n):
            palavra += letras[random.randrange(len(letras))]
        print("palavra gerada: ",palavra)
        return palavra




class AG:
    
    def gerarPopulacao(populacao, tamanhoPopulacao, estadoFinal):
        for  i in range(tamanhoPopulacao): 
            populacao.append(Cromossomo(Util.gerador(len(estadoFinal)), estadoFinal))
        
    

    
    def ordenar(populacao):
        
        houveTroca = False
        
        distancia = len(populacao)

        
            
        while (distancia > 1 or houveTroca):
            distancia = (int) (distancia / 1.3)
            if (distancia <= 0):
                distancia = 1
            
            houveTroca = False
            for  i in range(len(populacao) - distancia):
                if (populacao[i].aptidao < populacao[i + distancia].aptidao):
                    tmp = populacao[i]
                    populacao[i] = populacao[i + distancia]
                    populacao[i + distancia] =  tmp
                    houveTroca = True
                
            

    
    def exibir(populacao):
        for  i in range(len(populacao)):
            print("Cromossomo: ",populacao[i].valor , " - ", populacao[i].aptidao)
        

    
    def selecionarPorTorneio(populacao,  novaPopulacao,  taxaSelecao):
        

        
        torneio = []
        

        
        qtdSelecionados = taxaSelecao * len(populacao) / 100

        novaPopulacao.append(populacao[0])
        
        
        
        i = 1
        
        while True:
            
            c1 = populacao[random.randrange(len(populacao))]
            while True:
                c2 = populacao[random.randrange(len(populacao))]
                if (c2.__eq__(c1)==False):
                    break
            while True:
                c3 = populacao[ random.randrange(len(populacao))]
                if (c3.__eq__(c1) == False and c3.__eq__(c2) ==  False):
                    break

            torneio.append(c1)
            torneio.append(c2)
            torneio.append(c3)
            torneio.sort()

            selecionado = torneio[0]

            if selecionado not in novaPopulacao:
                novaPopulacao.append(selecionado)
                i+=1
                print("selecionado.......... " + selecionado.valor )
            
            
            torneio = [] 

            if i <= qtdSelecionados:
                break

    
    def selecionarPorRoleta(populacao, novaPopulacao, taxaSelecao):
        
        aptidaoTotal = 0
        i = 0
        for i in range(len(populacao)):
            aptidaoTotal += populacao[i].aptidao
        
        print("Aptidão total: " + aptidaoTotal)

        i = 0
        for  i in range(len( populacao)):
            populacao[i].porcentagemAptidao = populacao[i].aptidao * 100 / aptidaoTotal
            if populacao[i].porcentagemAptidao == 0:
                populacao[i].porcentagemAptidao = 1
            
        
        
        sorteio = []
        i = 0
        for  i in range(len( populacao)):
            j = 0
            for  j in range(populacao[i].porcentagemAptidao):
                sorteio.append(populacao[i])
            
        

        print("Tamanho da lista sorteio: " + len(sorteio))

        
        
        
        
        qtdSelecionados = taxaSelecao * len(populacao) / 100
        
       
        novaPopulacao.append(populacao[0])
        selecionado = Cromossomo()
        i = 1
        for i in range(qtdSelecionados):
            posicaoSorteio = random.randrange(len(sorteio))
            
            try:
                selecionado = sorteio[posicaoSorteio]

                novaPopulacao.append(selecionado)

                while sorteio.remove(selecionado):
                    continue
            except:
                print("Tentou pegar uma posição inválida do sorteio")
            
            
        
    

    
    def reproduzir(populacao,novaPopulacao,taxaReproducao, estadoFinal):
        
        
        
        qtdReproduzidos = taxaReproducao * len(populacao) / 100
        
        i = 0
        while True:
            pai = populacao[random.randrange(len(populacao))] 
            while True:
                mae = populacao[random.randrange(len(populacao))]
                if (mae.__eq__(pai) ==  False):
                    break

            sPai = str(pai.valor)
            sMae = str(mae.valor)
            
            sFilho1 = sPai[:1]+sPai[:int(len(sPai) / 2)] + sMae[:int(len(sMae) / 2)]  
            sFilho2 = sMae[:1]+sMae[:int(len(sMae) / 2)] + sPai[:int(len(sPai) / 2)]
            novaPopulacao.append(Cromossomo(sFilho1, estadoFinal))
            novaPopulacao.append(Cromossomo(sFilho2, estadoFinal))
            i = i + 2

            if i >= qtdReproduzidos:
                break
        
        
        while True:
            if len(novaPopulacao) > len(populacao):
                print(len(novaPopulacao))
                novaPopulacao.pop(len(novaPopulacao) - 1)
            else:
                break
        
    

    
    def mutar(populacao, estadoFinal):
        
        qtdMutantes = random.randrange(int(len(populacao) / 5))
        

        while qtdMutantes > 0: 
            posicaoMutante = random.randrange(len(populacao))
            mutante = populacao[posicaoMutante]
            print("vai mutar ", mutante.valor , "  " , mutante.aptidao)
            
            valorMutado = str(mutante.valor)
            caracterMutante = mutante.valor[random.randrange(len(mutante.valor))]
            caracterSorteado = Util.letras[random.randrange(len(Util.letras))]
            valorMutado = valorMutado.replace(caracterMutante, caracterSorteado);          
            mutante = Cromossomo(valorMutado, estadoFinal)
            populacao[posicaoMutante] = mutante
            qtdMutantes -= 1




def main():
    tamanhoPopulacao = int(input("Tamanho da população  "))
    estadoFinal = input("Palavra desejada   ")
    taxaSelecao = int(input("taxa desejada 20 a 40% "))
    taxaReproducao = 100 - taxaSelecao
    taxaMutacao = int(input("Taxa de mutação (entre 5 a 10%)    "))
    qtdGeracoes = int(input("Quantidade de gerações "))

    populacao = []
    novaPopulacao = []

    
    AG.gerarPopulacao(populacao, tamanhoPopulacao, estadoFinal)
    AG.ordenar(populacao)
    print("Geracao 1")
    AG.exibir(populacao)

    i = 1
    for i in range(qtdGeracoes):
        
        AG.selecionarPorTorneio(populacao, novaPopulacao, taxaSelecao)
        
        
        AG.reproduzir(populacao, novaPopulacao, taxaReproducao, estadoFinal)
        
        if (i % (len(populacao) / taxaMutacao) == 0):
            AG.mutar(novaPopulacao, estadoFinal)
        
        
        populacao = []
        
        populacao = novaPopulacao
        novaPopulacao = []
        AG.ordenar(populacao)
        print("\n\nGeracao ", (i + 1))
        
        AG.exibir(populacao)
main()


